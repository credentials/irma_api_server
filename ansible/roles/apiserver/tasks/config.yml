- name: Ensure that the server configuration dir exists
  file:
    path: "{{ conf_path }}"
    state: directory
    group: irma_api_server
    mode: 02750 # 0 indicates octal; 2 is setgid bit so that contained files get the same group

- name: Ensure that irma_configuration path exist
  when: irma_configuration_subpath
  file:
    path: "{{ conf_path }}/irma_configuration"
    state: directory
    group: irma_api_server

- name: Ensure that IRMA key and credential configuration is present
  when: irma_configuration_subpath
  git:
    repo: "{{ irma_configuration }}"
    dest: "{{ conf_path }}/irma_configuration/{{ irma_configuration_name }}"
    version: "{{ irma_configuration_branch }}"
  notify: restart apiserver

- name: Ensure that IRMA key and credential configuration is present
  when: not irma_configuration_subpath
  git:
    repo: "{{ irma_configuration }}"
    dest: "{{ conf_path }}/irma_configuration"
    version: "{{ irma_configuration_branch }}"
  notify: restart apiserver

- name: Download JWT key generation script
  get_url:
    url: https://raw.githubusercontent.com/privacybydesign/irma_api_server/master/utils/keygen.sh
    dest: /tmp/irma-keygen.sh
    mode: 0750

- name: Ensure that JWT keys are generated
  command: /tmp/irma-keygen.sh sk pk
  args:
    chdir: "{{ conf_path }}"
    creates: "{{ conf_path }}/sk.der"

- name: Remove unnecessary JWT .pem key
  file:
    path: "{{ conf_path }}/sk.pem"
    state: absent

- name: Ensure main configuration file is present
  template:
    src: config.json.j2
    dest: "{{ conf_path }}/config.json"
    group: irma_api_server
  notify: restart apiserver

- name: Check existence of keyshare server public key
  local_action: stat path="{{ inventory_dir }}/files/{{ irma_configuration_name }}-kss.der"
  become: no
  register: ksspublickey

- name: copy keyshare public key if it exists
  copy:
    src: "{{ inventory_dir }}/files/{{ irma_configuration_name }}-kss.der"
    dest: "{{ conf_path }}"
    group: irma_api_server
  when: ksspublickey.stat.exists
  notify: restart apiserver

- name: See if client publickey directories are present
  local_action: stat path="{{ inventory_dir }}/files/{{ item }}s"
  become: no
  register: clientdirs
  ignore_errors: true
  with_items:
    - verifier
    - issuer
    - sigclient

- name: copy client dirs if they exists
  copy:
    src: "{{ inventory_dir }}/files/{{ item.item }}s"
    dest: "{{ conf_path }}"
  when: item.stat.exists
  with_items: "{{ clientdirs.results }}"

- name: ensure privatekeys folder exists if necessary
  file:
    path: "{{ conf_path }}/irma_configuration/{{ item.schememanager }}/{{ item.issuer }}/PrivateKeys"
    state: directory
    group: irma_api_server
    mode: 0550
  no_log: true # Don't spew privatekeys all over stdout
  with_items: "{{ irma_privatekeys }}"
  when: irma_privatekeys is defined

- name: copy privatekeys from vault
  copy:
    content: "{{ item.privatekey }}"
    dest: "{{ conf_path }}/irma_configuration/{{ item.schememanager }}/{{ item.issuer }}/PrivateKeys/{{ item.counter }}.xml"
    group: irma_api_server
    mode: 0440
  no_log: true
  with_items: "{{ irma_privatekeys }}"
  when: irma_privatekeys is defined
  notify: restart apiserver
